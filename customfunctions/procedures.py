"""Helps Manage Snowflake Connection"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_procedures.ipynb.

# %% auto 0
__all__ = ['is_snowflake_environment', 'find_config_file', 'get_config_path', 'load_config', 'hello_procedure', 'test_procedure']

# %% ../nbs/03_procedures.ipynb 3
from pathlib import Path
from datetime import datetime
from snowflake.snowpark import Session

from typing import Optional, Dict, Union
import sys
import json
import os
import yaml
import logging
import zipfile

# %% ../nbs/03_procedures.ipynb 4
def is_snowflake_environment() -> bool:
    """Detect if code is running in Snowflake environment."""
    return hasattr(sys, '_xoptions') and 'snowflake_import_directory' in sys._xoptions

# %% ../nbs/03_procedures.ipynb 6
def find_config_file(filename: str = 'config.yaml', max_levels_up: int = 3) -> Optional[Path]:
    """
    Search for config file in current directory and parent directories.
    
    Args:
        filename: Name of config file to find
        max_levels_up: Maximum number of parent directories to check
    
    Returns:
        Path to config file if found, None otherwise
    """
    current = Path.cwd()
    
    # First check if config exists in expected structure from current directory
    expected_path = current / 'customfunctions' / 'files' / filename
    if expected_path.is_file():
        return expected_path
        
    # Then check parent directories
    for _ in range(max_levels_up):
        # Check for config in customfunctions/files structure
        config_path = current / 'customfunctions' / 'files' / filename
        if config_path.is_file():
            return config_path
            
        # Also check for direct config.yaml in case structure is different
        direct_path = current / filename
        if direct_path.is_file():
            return direct_path
            
        current = current.parent
        
    return None

def get_config_path(snowflake_extracted_path: str = '/tmp/customfunctions') -> Path:
    """
    Determine the configuration file path based on environment.
    
    Args:
        snowflake_extracted_path: Path where Snowflake extracts files
    
    Returns:
        Path object pointing to config file
    """
    if is_snowflake_environment():
        # Snowflake environment logic remains the same
        import_dir = Path(sys._xoptions['snowflake_import_directory'])
        zip_file_path = import_dir / "customfunctions.zip"
        
        if not Path(snowflake_extracted_path).exists():
            try:
                with zipfile.ZipFile(zip_file_path, 'r') as myzip:
                    myzip.extractall(snowflake_extracted_path)
            except Exception as e:
                logging.error(f"Failed to extract ZIP file: {e}")
                raise
                
        return Path(snowflake_extracted_path) / 'customfunctions/files/config.yaml'
    else:
        # Local environment - search for config file
        config_path = find_config_file()
        if config_path is None:
            # If not found, return a default path for consistent error messaging
            return Path.cwd() / 'customfunctions' / 'files' / 'config.yaml'
        return config_path

# %% ../nbs/03_procedures.ipynb 8
def load_config(config_path: Path) -> Dict:
    """
    Load configuration from YAML file with error handling.
    
    Args:
        config_path: Path to configuration file
    
    Returns:
        Dictionary containing configuration
    """
    try:
        if config_path.is_file():
            with open(config_path, 'r') as file:
                config = yaml.safe_load(file)
                logging.info(f"Successfully loaded configuration from {config_path}")
                return config or {}
        else:
            logging.warning(f"Configuration file '{config_path}' not found. Using empty configuration.")
            return {}
    except Exception as e:
        logging.error(f"Error reading configuration file: {e}")
        return {}

# %% ../nbs/03_procedures.ipynb 11
def hello_procedure(session: Optional[Session] = None, name: str = "World") -> str:
    """
    Enhanced hello procedure that works both locally and in Snowflake.
    
    Args:
        session: Snowflake session (optional, only needed in Snowflake environment)
        name: Name to greet
    
    Returns:
        Greeting string
    """
    try:
        # Get config path based on environment
        config_path = get_config_path()
        
        # Load configuration
        config = load_config(config_path)
        
        # Get additional word from config, with fallback
        added_word = config.get('added_word', '')
        
        # Build and return greeting
        greeting = f"Hello, {name}!"
        if added_word:
            greeting += f" {added_word}"
            
        return greeting
        
    except Exception as e:
        logging.error(f"Error in hello_procedure: {e}")
        # Return a basic greeting in case of any errors
        return f"Hello, {name}!"


# %% ../nbs/03_procedures.ipynb 13
def test_procedure(session: Session) -> str:
    return "Test procedure"
